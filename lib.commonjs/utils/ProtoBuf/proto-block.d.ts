/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.3
 * source: proto-block.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./proto_common";
import * as pb_1 from "google-protobuf";
export declare namespace block {
    class ProtoTransaction extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | ({} & (({
            type?: number;
        }) | ({
            to?: Uint8Array;
        }) | ({
            nonce?: number;
        }) | ({
            value?: Uint8Array;
        }) | ({
            gas?: number;
        }) | ({
            data?: Uint8Array;
        }) | ({
            chain_id?: Uint8Array;
        }) | ({
            gas_fee_cap?: Uint8Array;
        }) | ({
            gas_tip_cap?: Uint8Array;
        }) | ({
            access_list?: ProtoAccessList;
        }) | ({
            etx_gas_limit?: number;
        }) | ({
            etx_gas_price?: Uint8Array;
        }) | ({
            etx_gas_tip?: Uint8Array;
        }) | ({
            etx_data?: Uint8Array;
        }) | ({
            etx_access_list?: ProtoAccessList;
        }) | ({
            v?: Uint8Array;
        }) | ({
            r?: Uint8Array;
        }) | ({
            s?: Uint8Array;
        }) | ({
            originating_tx_hash?: dependency_1.common.ProtoHash;
        }) | ({
            etx_index?: number;
        }) | ({
            etx_sender?: Uint8Array;
        }) | ({
            tx_ins?: ProtoTxIns;
        }) | ({
            tx_outs?: ProtoTxOuts;
        }) | ({
            signature?: Uint8Array;
        }))));
        get type(): number;
        set type(value: number);
        get has_type(): boolean;
        get to(): Uint8Array;
        set to(value: Uint8Array);
        get has_to(): boolean;
        get nonce(): number;
        set nonce(value: number);
        get has_nonce(): boolean;
        get value(): Uint8Array;
        set value(value: Uint8Array);
        get has_value(): boolean;
        get gas(): number;
        set gas(value: number);
        get has_gas(): boolean;
        get data(): Uint8Array;
        set data(value: Uint8Array);
        get has_data(): boolean;
        get chain_id(): Uint8Array;
        set chain_id(value: Uint8Array);
        get has_chain_id(): boolean;
        get gas_fee_cap(): Uint8Array;
        set gas_fee_cap(value: Uint8Array);
        get has_gas_fee_cap(): boolean;
        get gas_tip_cap(): Uint8Array;
        set gas_tip_cap(value: Uint8Array);
        get has_gas_tip_cap(): boolean;
        get access_list(): ProtoAccessList;
        set access_list(value: ProtoAccessList);
        get has_access_list(): boolean;
        get etx_gas_limit(): number;
        set etx_gas_limit(value: number);
        get has_etx_gas_limit(): boolean;
        get etx_gas_price(): Uint8Array;
        set etx_gas_price(value: Uint8Array);
        get has_etx_gas_price(): boolean;
        get etx_gas_tip(): Uint8Array;
        set etx_gas_tip(value: Uint8Array);
        get has_etx_gas_tip(): boolean;
        get etx_data(): Uint8Array;
        set etx_data(value: Uint8Array);
        get has_etx_data(): boolean;
        get etx_access_list(): ProtoAccessList;
        set etx_access_list(value: ProtoAccessList);
        get has_etx_access_list(): boolean;
        get v(): Uint8Array;
        set v(value: Uint8Array);
        get has_v(): boolean;
        get r(): Uint8Array;
        set r(value: Uint8Array);
        get has_r(): boolean;
        get s(): Uint8Array;
        set s(value: Uint8Array);
        get has_s(): boolean;
        get originating_tx_hash(): dependency_1.common.ProtoHash;
        set originating_tx_hash(value: dependency_1.common.ProtoHash);
        get has_originating_tx_hash(): boolean;
        get etx_index(): number;
        set etx_index(value: number);
        get has_etx_index(): boolean;
        get etx_sender(): Uint8Array;
        set etx_sender(value: Uint8Array);
        get has_etx_sender(): boolean;
        get tx_ins(): ProtoTxIns;
        set tx_ins(value: ProtoTxIns);
        get has_tx_ins(): boolean;
        get tx_outs(): ProtoTxOuts;
        set tx_outs(value: ProtoTxOuts);
        get has_tx_outs(): boolean;
        get signature(): Uint8Array;
        set signature(value: Uint8Array);
        get has_signature(): boolean;
        get _type(): "none" | "type";
        get _to(): "none" | "to";
        get _nonce(): "none" | "nonce";
        get _value(): "none" | "value";
        get _gas(): "none" | "gas";
        get _data(): "none" | "data";
        get _chain_id(): "none" | "chain_id";
        get _gas_fee_cap(): "none" | "gas_fee_cap";
        get _gas_tip_cap(): "none" | "gas_tip_cap";
        get _access_list(): "none" | "access_list";
        get _etx_gas_limit(): "none" | "etx_gas_limit";
        get _etx_gas_price(): "none" | "etx_gas_price";
        get _etx_gas_tip(): "none" | "etx_gas_tip";
        get _etx_data(): "none" | "etx_data";
        get _etx_access_list(): "none" | "etx_access_list";
        get _v(): "none" | "v";
        get _r(): "none" | "r";
        get _s(): "none" | "s";
        get _originating_tx_hash(): "none" | "originating_tx_hash";
        get _etx_index(): "none" | "etx_index";
        get _etx_sender(): "none" | "etx_sender";
        get _tx_ins(): "none" | "tx_ins";
        get _tx_outs(): "none" | "tx_outs";
        get _signature(): "none" | "signature";
        static fromObject(data: {
            type?: number;
            to?: Uint8Array;
            nonce?: number;
            value?: Uint8Array;
            gas?: number;
            data?: Uint8Array;
            chain_id?: Uint8Array;
            gas_fee_cap?: Uint8Array;
            gas_tip_cap?: Uint8Array;
            access_list?: ReturnType<typeof ProtoAccessList.prototype.toObject>;
            etx_gas_limit?: number;
            etx_gas_price?: Uint8Array;
            etx_gas_tip?: Uint8Array;
            etx_data?: Uint8Array;
            etx_access_list?: ReturnType<typeof ProtoAccessList.prototype.toObject>;
            v?: Uint8Array;
            r?: Uint8Array;
            s?: Uint8Array;
            originating_tx_hash?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>;
            etx_index?: number;
            etx_sender?: Uint8Array;
            tx_ins?: ReturnType<typeof ProtoTxIns.prototype.toObject>;
            tx_outs?: ReturnType<typeof ProtoTxOuts.prototype.toObject>;
            signature?: Uint8Array;
        }): ProtoTransaction;
        toObject(): {
            type?: number | undefined;
            to?: Uint8Array | undefined;
            nonce?: number | undefined;
            value?: Uint8Array | undefined;
            gas?: number | undefined;
            data?: Uint8Array | undefined;
            chain_id?: Uint8Array | undefined;
            gas_fee_cap?: Uint8Array | undefined;
            gas_tip_cap?: Uint8Array | undefined;
            access_list?: {
                access_tuples?: {
                    address?: Uint8Array | undefined;
                    storage_key?: {
                        value?: Uint8Array | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
            etx_gas_limit?: number | undefined;
            etx_gas_price?: Uint8Array | undefined;
            etx_gas_tip?: Uint8Array | undefined;
            etx_data?: Uint8Array | undefined;
            etx_access_list?: {
                access_tuples?: {
                    address?: Uint8Array | undefined;
                    storage_key?: {
                        value?: Uint8Array | undefined;
                    }[] | undefined;
                }[] | undefined;
            } | undefined;
            v?: Uint8Array | undefined;
            r?: Uint8Array | undefined;
            s?: Uint8Array | undefined;
            originating_tx_hash?: {
                value?: Uint8Array | undefined;
            } | undefined;
            etx_index?: number | undefined;
            etx_sender?: Uint8Array | undefined;
            tx_ins?: {
                tx_ins?: {
                    previous_out_point?: {
                        hash?: {
                            value?: Uint8Array | undefined;
                        } | undefined;
                        index?: number | undefined;
                    } | undefined;
                    pub_key?: Uint8Array | undefined;
                }[] | undefined;
            } | undefined;
            tx_outs?: {
                tx_outs?: {
                    denomination?: number | undefined;
                    address?: Uint8Array | undefined;
                }[] | undefined;
            } | undefined;
            signature?: Uint8Array | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTransaction;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoTransaction;
    }
    class ProtoAccessList extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | {
            access_tuples?: ProtoAccessTuple[];
        });
        get access_tuples(): ProtoAccessTuple[];
        set access_tuples(value: ProtoAccessTuple[]);
        static fromObject(data: {
            access_tuples?: ReturnType<typeof ProtoAccessTuple.prototype.toObject>[];
        }): ProtoAccessList;
        toObject(): {
            access_tuples?: {
                address?: Uint8Array | undefined;
                storage_key?: {
                    value?: Uint8Array | undefined;
                }[] | undefined;
            }[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoAccessList;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoAccessList;
    }
    class ProtoTxIns extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | {
            tx_ins?: ProtoTxIn[];
        });
        get tx_ins(): ProtoTxIn[];
        set tx_ins(value: ProtoTxIn[]);
        static fromObject(data: {
            tx_ins?: ReturnType<typeof ProtoTxIn.prototype.toObject>[];
        }): ProtoTxIns;
        toObject(): {
            tx_ins?: {
                previous_out_point?: {
                    hash?: {
                        value?: Uint8Array | undefined;
                    } | undefined;
                    index?: number | undefined;
                } | undefined;
                pub_key?: Uint8Array | undefined;
            }[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxIns;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoTxIns;
    }
    class ProtoTxOuts extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | {
            tx_outs?: ProtoTxOut[];
        });
        get tx_outs(): ProtoTxOut[];
        set tx_outs(value: ProtoTxOut[]);
        static fromObject(data: {
            tx_outs?: ReturnType<typeof ProtoTxOut.prototype.toObject>[];
        }): ProtoTxOuts;
        toObject(): {
            tx_outs?: {
                denomination?: number | undefined;
                address?: Uint8Array | undefined;
            }[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxOuts;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoTxOuts;
    }
    class ProtoTxIn extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | ({} & (({
            previous_out_point?: ProtoOutPoint;
        }) | ({
            pub_key?: Uint8Array;
        }))));
        get previous_out_point(): ProtoOutPoint;
        set previous_out_point(value: ProtoOutPoint);
        get has_previous_out_point(): boolean;
        get pub_key(): Uint8Array;
        set pub_key(value: Uint8Array);
        get has_pub_key(): boolean;
        get _previous_out_point(): "none" | "previous_out_point";
        get _pub_key(): "none" | "pub_key";
        static fromObject(data: {
            previous_out_point?: ReturnType<typeof ProtoOutPoint.prototype.toObject>;
            pub_key?: Uint8Array;
        }): ProtoTxIn;
        toObject(): {
            previous_out_point?: {
                hash?: {
                    value?: Uint8Array | undefined;
                } | undefined;
                index?: number | undefined;
            } | undefined;
            pub_key?: Uint8Array | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxIn;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoTxIn;
    }
    class ProtoOutPoint extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | ({} & (({
            hash?: dependency_1.common.ProtoHash;
        }) | ({
            index?: number;
        }))));
        get hash(): dependency_1.common.ProtoHash;
        set hash(value: dependency_1.common.ProtoHash);
        get has_hash(): boolean;
        get index(): number;
        set index(value: number);
        get has_index(): boolean;
        get _hash(): "none" | "hash";
        get _index(): "index" | "none";
        static fromObject(data: {
            hash?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>;
            index?: number;
        }): ProtoOutPoint;
        toObject(): {
            hash?: {
                value?: Uint8Array | undefined;
            } | undefined;
            index?: number | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoOutPoint;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoOutPoint;
    }
    class ProtoTxOut extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | ({} & (({
            denomination?: number;
        }) | ({
            address?: Uint8Array;
        }))));
        get denomination(): number;
        set denomination(value: number);
        get has_denomination(): boolean;
        get address(): Uint8Array;
        set address(value: Uint8Array);
        get has_address(): boolean;
        get _denomination(): "none" | "denomination";
        get _address(): "none" | "address";
        static fromObject(data: {
            denomination?: number;
            address?: Uint8Array;
        }): ProtoTxOut;
        toObject(): {
            denomination?: number | undefined;
            address?: Uint8Array | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTxOut;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoTxOut;
    }
    class ProtoAccessTuple extends pb_1.Message {
        one_of_decls: number[][];
        constructor(data?: any[] | {
            address?: Uint8Array;
            storage_key?: dependency_1.common.ProtoHash[];
        });
        get address(): Uint8Array;
        set address(value: Uint8Array);
        get storage_key(): dependency_1.common.ProtoHash[];
        set storage_key(value: dependency_1.common.ProtoHash[]);
        static fromObject(data: {
            address?: Uint8Array;
            storage_key?: ReturnType<typeof dependency_1.common.ProtoHash.prototype.toObject>[];
        }): ProtoAccessTuple;
        toObject(): {
            address?: Uint8Array | undefined;
            storage_key?: {
                value?: Uint8Array | undefined;
            }[] | undefined;
        };
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoAccessTuple;
        serializeBinary(): Uint8Array;
        static deserializeBinary(bytes: Uint8Array): ProtoAccessTuple;
    }
}
//# sourceMappingURL=proto-block.d.ts.map